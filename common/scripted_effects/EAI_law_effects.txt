############################################################################################################
#	Expert AI mod - scripted law AI effects
############################################################################################################

# pp stored separately for important things
EAI_store_PP = {

	### find the highest law cost and store enough pp for it

	set_variable = { EAI_max_stored_pp = 150 }

	set_temp_variable = { EAI_eco_law_cost = modifier@economy_cost_factor }
	add_to_temp_variable = { EAI_eco_law_cost = 1 }
	multiply_temp_variable = { EAI_eco_law_cost = 150 }

	set_temp_variable = { EAI_man_law_cost = modifier@mobilization_laws_cost_factor }
	add_to_temp_variable = { EAI_man_law_cost = 1 }
	multiply_temp_variable = { EAI_man_law_cost = 150 }

	set_temp_variable = { EAI_tra_law_cost = modifier@trade_laws_cost_factor }
	add_to_temp_variable = { EAI_tra_law_cost = 1 }
	multiply_temp_variable = { EAI_tra_law_cost = 150 }

	if = { limit = { check_variable = { EAI_eco_law_cost > EAI_max_stored_pp } } set_variable = { EAI_max_stored_pp = EAI_eco_law_cost } }
	if = { limit = { check_variable = { EAI_man_law_cost > EAI_max_stored_pp } } set_variable = { EAI_max_stored_pp = EAI_man_law_cost } }
	if = { limit = { check_variable = { EAI_tra_law_cost > EAI_max_stored_pp } } set_variable = { EAI_max_stored_pp = EAI_tra_law_cost } }

    if = {
		limit = {
			has_political_power > 50

			check_variable = { EAI_stored_PP < EAI_max_stored_pp }

			### priorities

			NOT = { 
				EAI_pp_advisor_prio = yes 
				EAI_can_take_women_in_the_workforce = yes
			}
		}

		add_political_power = -25

		add_to_variable = { EAI_stored_PP = 25 }
	}
}

### law upgrade scripted AI

EAI_upgrade_economy_law = {
    if = { 
		limit = { 
			EAI_can_upgrade_economy_law = yes 

			OR = {
				AND = {
					has_war = yes

					NOT = { EAI_can_upgrade_manpower_law = yes }
				}
				AND = {
					has_war = no
				}
			}
		}

		set_temp_variable = { EAI_eco_law_cost = modifier@economy_cost_factor }
		add_to_temp_variable = { EAI_eco_law_cost = 1 }
		multiply_temp_variable = { EAI_eco_law_cost = 150 }

		if = {
			limit = { NOT = { check_variable = { EAI_stored_PP < EAI_eco_law_cost } } }

            subtract_from_variable = { EAI_stored_PP = EAI_eco_law_cost }

			if = { limit = { EAI_can_take_low_economic_mobilisation = yes } 
            
                add_ideas = low_economic_mobilisation

				### on_add

				if = {
					limit = {
						tag = USA
						has_completed_focus = USA_limited_intervention
						has_defensive_war = no
					}
					USA_congress_large_opposition = yes
				}

				###

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ECONOMY LAW: low_economic_mobilisation (script)" } 
            }

			else_if = { limit = { EAI_can_take_partial_economic_mobilisation = yes } 
                
                add_ideas = partial_economic_mobilisation

				### on_add

				if = {
					limit = {
						tag = USA
						has_completed_focus = USA_limited_intervention
						has_defensive_war = no
					}
					USA_congress_large_opposition = yes
				}

				###

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ECONOMY LAW: partial_economic_mobilisation (script)" } 
            }

			else_if = { limit = { EAI_can_take_war_economy = yes } 

                add_ideas = war_economy

				### on_add

				if = {
					limit = {
						tag = USA
						has_completed_focus = USA_limited_intervention
						has_defensive_war = no
					}
					USA_congress_large_opposition = yes
				}

				###

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ECONOMY LAW: war_economy (script)" } 
            }

			else_if = { limit = { EAI_can_take_tot_economic_mobilisation = yes } 
            
                add_ideas = tot_economic_mobilisation

				### on_add

				if = {
					limit = {
						tag = USA
						has_completed_focus = USA_limited_intervention
						has_defensive_war = no
					}
					USA_congress_large_opposition = yes
				}

				###

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ECONOMY LAW: tot_economic_mobilisation (script)" } 
            }
		}
	}
}

EAI_upgrade_conscription_law = {
    if = { 
		limit = { 
			EAI_can_upgrade_manpower_law = yes 

			OR = {
                AND = {
			    	has_war = yes
			    }
			    AND = {
			    	has_war = no

			    	NOT = {
			    		EAI_can_upgrade_economy_law = yes

			    		EAI_can_upgrade_trade_law = yes
			    	}
			    }
            }
		}

		set_temp_variable = { EAI_man_law_cost = modifier@mobilization_laws_cost_factor }
		add_to_temp_variable = { EAI_man_law_cost = 1 }
		multiply_temp_variable = { EAI_man_law_cost = 150 }

		if = {
			limit = { NOT = { check_variable = { EAI_stored_PP < EAI_man_law_cost } } }

            subtract_from_variable = { EAI_stored_PP = EAI_man_law_cost }

			if = { limit = { EAI_can_take_volunteer_only = yes } 
            
                add_ideas = volunteer_only

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: volunteer_only (script) mobilization time: [?rec_pop_change]" } 
            }

			else_if = { limit = { EAI_can_take_limited_conscription = yes } 
                
                add_ideas = limited_conscription

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: limited_conscription (script) mobilization time: [?rec_pop_change]" } 
            }

			else_if = { limit = { EAI_can_take_extensive_conscription = yes } 
           
                add_ideas = extensive_conscription

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: extensive_conscription (script) mobilization time: [?rec_pop_change]" } 
            }

			else_if = { limit = { EAI_can_take_service_by_requirement = yes } 
            
                add_ideas = service_by_requirement

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: service_by_requirement (script) mobilization time: [?rec_pop_change]" } 
            }

            else_if = { limit = { EAI_can_take_all_adults_serve = yes } 
            
                add_ideas = all_adults_serve

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: all_adults_serve (script) mobilization time: [?rec_pop_change]" } 
            }

            else_if = { limit = { EAI_can_take_scraping_the_barrel = yes } 
            
                add_ideas = scraping_the_barrel

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSCRIPTION LAW: scraping_the_barrel (script) mobilization time: [?rec_pop_change]" } 
            }
		}
	}
}

EAI_upgrade_trade_law = {
	EAI_calculate_resource_need = yes
	
    if = { 
		limit = { 
			EAI_can_upgrade_trade_law = yes 

			OR = {
				AND = {
					has_war = yes
	
					NOT = { EAI_can_upgrade_manpower_law = yes }
				}
				AND = {
					has_war = no
				}
			}
		}

		set_temp_variable = { EAI_tra_law_cost = modifier@trade_laws_cost_factor }
		add_to_temp_variable = { EAI_tra_law_cost = 1 }
		multiply_temp_variable = { EAI_tra_law_cost = 150 }

		if = {
			limit = { NOT = { check_variable = { EAI_stored_PP < EAI_tra_law_cost } } }

            subtract_from_variable = { EAI_stored_PP = EAI_tra_law_cost }

			if = { limit = { EAI_can_take_free_trade = yes } 
            
                add_ideas = free_trade

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | TRADE LAW: free_trade (need: [?EAI_average_resource_need]) (script)" } 
            }

			else_if = { limit = { EAI_can_take_export_focus = yes } 
                
                add_ideas = export_focus

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | TRADE LAW: export_focus (need: [?EAI_average_resource_need]) (script)" } 
            }

			else_if = { limit = { EAI_can_take_limited_exports = yes } 
           
                add_ideas = limited_exports

				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | TRADE LAW: limited_exports (need: [?EAI_average_resource_need]) (script)" } 
            }

			set_country_flag = { flag = EAI_trade_law_recently_changed value = 1 days = 365 } # limits the AI from changing trade law due to minor fluctuations
		}
	}
}

# calculates the fraction of consumed resources : owned resources (only those with significant quantities) for trade law selection
EAI_calculate_resource_need = {

	set_variable = { EAI_average_resource_need = 0 }

	### ALUMINIUM

	if = { limit = { check_variable = { resource_produced@aluminium > 75 } }

		set_temp_variable = { EAI_aluminium_needed = resource_consumed@aluminium }
		if = { limit = { check_variable = { resource@aluminium < 0 } }

			set_temp_variable = { aluminium_deficit = resource@aluminium }
			multiply_temp_variable = { aluminium_deficit = -1 }
			add_to_temp_variable = { EAI_aluminium_needed = aluminium_deficit }
		}
		divide_temp_variable = { EAI_aluminium_needed = resource_produced@aluminium }
		clamp_temp_variable = { var = EAI_aluminium_needed min = 0 max = 1 }
		add_to_variable = { EAI_average_resource_need = EAI_aluminium_needed }	
		add_to_temp_variable = { EAI_resource_count = 1 }
	}

	### RUBBER

	if = { limit = { check_variable = { resource_produced@rubber > 75 } }

		set_temp_variable = { EAI_rubber_needed = resource_consumed@rubber }
		if = { limit = { check_variable = { resource@rubber < 0 } }

			set_temp_variable = { rubber_deficit = resource@rubber }
			multiply_temp_variable = { rubber_deficit = -1 }
			add_to_temp_variable = { EAI_rubber_needed = rubber_deficit }
		}
		divide_temp_variable = { EAI_rubber_needed = resource_produced@rubber }
		clamp_temp_variable = { var = EAI_rubber_needed min = 0 max = 1 }
		add_to_variable = { EAI_average_resource_need = EAI_rubber_needed }	
		add_to_temp_variable = { EAI_resource_count = 1 }
	}

	### TUNGSTEN

	if = { limit = { check_variable = { resource_produced@tungsten > 75 } }

		set_temp_variable = { EAI_tungsten_needed = resource_consumed@tungsten }
		if = { limit = { check_variable = { resource@tungsten < 0 } }

			set_temp_variable = { tungsten_deficit = resource@tungsten }
			multiply_temp_variable = { tungsten_deficit = -1 }
			add_to_temp_variable = { EAI_tungsten_needed = tungsten_deficit }
		}
		divide_temp_variable = { EAI_tungsten_needed = resource_produced@tungsten }
		clamp_temp_variable = { var = EAI_tungsten_needed min = 0 max = 1 }
		add_to_variable = { EAI_average_resource_need = EAI_tungsten_needed }	
		add_to_temp_variable = { EAI_resource_count = 1 }
	}

	### STEEL

	if = { limit = { check_variable = { resource_produced@steel > 75 } }

		set_temp_variable = { EAI_steel_needed = resource_consumed@steel }
		if = { limit = { check_variable = { resource@steel < 0 } }

			set_temp_variable = { steel_deficit = resource@steel }
			multiply_temp_variable = { steel_deficit = -1 }
			add_to_temp_variable = { EAI_steel_needed = steel_deficit }
		}
		divide_temp_variable = { EAI_steel_needed = resource_produced@steel }
		clamp_temp_variable = { var = EAI_steel_needed min = 0 max = 1 }
		add_to_variable = { EAI_average_resource_need = EAI_steel_needed }	
		add_to_temp_variable = { EAI_resource_count = 1 }
	}

	### CHROMIUM

	if = { limit = { check_variable = { resource_produced@chromium > 75 } }

		set_temp_variable = { EAI_chromium_needed = resource_consumed@chromium }
		if = { limit = { check_variable = { resource@chromium < 0 } }

			set_temp_variable = { chromium_deficit = resource@chromium }
			multiply_temp_variable = { chromium_deficit = -1 }
			add_to_temp_variable = { EAI_chromium_needed = chromium_deficit }
		}
		divide_temp_variable = { EAI_chromium_needed = resource_produced@chromium }
		clamp_temp_variable = { var = EAI_chromium_needed min = 0 max = 1 }
		add_to_variable = { EAI_average_resource_need = EAI_chromium_needed }	
		add_to_temp_variable = { EAI_resource_count = 1 }
	}

	###

	divide_variable = { EAI_average_resource_need = EAI_resource_count }
}